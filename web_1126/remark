一、servelt API
  1） 抽象类 HttpServlet
    public abstract class HttpServlet extends GenericServlet{
      //处理
     protected void service(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException
        {
        ....
        }
    }


  2）抽象类 GenericServlet
    public abstract class GenericServlet implements Servlet
    {

        public void init() throws ServletException {

        }
        //抽象方法
        public abstract void service(ServletRequest req, ServletResponse res)
        throws ServletException, IOException;

       public void destroy() {
       }
    }



  3）接口 Servlet
    public interface Servlet{

    //初始化
    public void init(ServletConfig config) throws ServletException;

    //处理
    public void service(ServletRequest req, ServletResponse res)
    	throws ServletException, IOException;

    //销毁
     public void destroy();

    }

Servlet模板代码：
         //1.处理中文
         response.setContentType("text/html;charset=utf-8");
         //2.输出对象
         PrintWriter out = response.getWriter();

         //3.刷新关闭
         out.flush();
         out.close();

servlet的接口
   1）请求接口ServletRequest ,有协议的请求接口HttpServletRequest
   2）响应接口ServletResponse,有协议的响应接口HttpServletResponse
   3）配置参数接口ServletConfig
        （1） 单个参数 public String getInitParameter(String name);
        （2） 上下文对象   public ServletContext getServletContext();
        （3） 多个参数    public Enumeration<String> getInitParameterNames();

二、Servlet的生命周期
   （1）加载并实例化
   （2）初始化init()
   （3）请求处理 service()
   （4）销毁 destroy()
三、配置Servlet时要注意的：
     （1）servlet-mapping 与 Sevlet 名称相同！！！
     （2）servlet-mapping 中url-pattern 必须（/名称）

四、servletConfig配置参数： web.xml
   （1）局部参数
       <servlet>
              <servlet-name>TestServlet</servlet-name>
              <servlet-class>org.hlx.TestServlet</servlet-class>
              <!--局部参数 一个Sevlet-->
              <init-param>
                  <param-name>name</param-name>
                  <param-value>楼挺好</param-value>
              </init-param>
       </servlet>

   （2）全局参数
        <!--全局参数-->
          <context-param>
              <param-name>username</param-name>
              <param-value>root</param-value>
          </context-param>

在servlet调用
      //获得局部参数
        String string =getInitParameter("name");
        String age =getInitParameter("age");
        out.println(string+"&nbsp;"+age);


        //3.获取全局参数
        String uname =getServletContext().getInitParameter("username");
        String upass =getServletContext().getInitParameter("password");
        out.println("<p/>"+uname+"&nbsp;"+upass);

五、servlet中的常用方法：
   1）请求表单参数： request.getParameter()
   2）请求转发：request.getRequestDispatcher()
   3）重定向：response.sendRedirect()
   4）会话对象session：request.getSession()
   5）应用对象application：request.getServletContext()


小结：
    Servlet的作用
       1）负责接收请求，调用相应Service方法，决定如何响应，本身不做业务逻辑
       2）创建和部署Servlet（重点）
            创建：继承自HttpServlet
            部署：修改web.xml添加<servlet>、<servlet-mapping>
       3）Servlet的好处
            专人专职：JSP负责显示，Servlet负责控制

servlet是jsp的基础！！！！

六、过滤器（中文处理针对Servlet的）

 web.xml文件中的配置：
    <filter>
        <filter-name>过滤器名</filter-name>
        <filter-class>过滤器的完全限定名</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>过滤器名</filter-name>
        <url-pattern>过滤器映射的Web资源</url-pattern>
    </filter-mapping>

注意：
    1）完全匹配：/index.jsp
    2）目录匹配：/admin/*
    3）扩展名匹配：*.do
    4）全部匹配：/*


过滤器的生命周期
    1)实例化
    2)初始化：init()
    3)过滤：doFilter()
    4)销毁：destroy()


过滤器的应用场合:
    1)对请求和响应进行统一处理
    2)对请求进行日志记录和审核
    3)对数据进行屏蔽和替换
    4)对数据进行加密和解密


总结：
 什么是Servlet
 Servlet的作用
 Servlet的使用
 定义Servlet
 配置Servlet
 Servlet的生命周期


什么是Filter
   对web服务器管理的所有web资源；
Filter的作用
    实现一些特殊的功能的拦截
Filter的使用
    定义Filter
    配置Filter
Filter的生命周期



https://www.cnblogs.com/cainiao-chuanqi/p/11326793.html
